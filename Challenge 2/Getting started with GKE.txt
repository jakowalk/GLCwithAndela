Google Cloud Fundamentals: Getting Started with GKE

In this lab, you create a Google Kubernetes Engine cluster containing several containers, each containing a web server. You place a load balancer in front of the cluster and view its contents.

Objectives
In this lab, you learn how to perform the following tasks:

-Provision a Kubernetes cluster using Kubernetes Engine.

-Deploy and manage Docker containers using kubectl.

Task 2: Confirm that needed APIs are enabled
	In CLoud Shell, enable the APIs by entering the following in order:

	gcloud config set project qwiklabs-gcp-02-942dbf7e6f71
	gcloud services enable containerregistry.googleapis.com
	gcloud services enable container.googleapis.com
	
	Confirm they are enabled with:
	gcloud services list


Task 3: Start a Kubernetes Engine cluster

	Place the zone into an environment variable called MY_ZONE:
	export MY_ZONE=us-central1-a

	Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
	gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2

	After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
	kubectl version

	View your running nodes in CloudShell with:
	gcloud compute instances list


Task 4: Run and deploy a container
	Launch a single instance of the nginx container:
	kubectl create deploy nginx --image=nginx:1.17.10

	View the pod running the nginx container:
	kubectl get pods

	Expose the nginx container to the Internet:
	kubectl expose deployment nginx --port 80 --type LoadBalancer

	View the new service:
	kubectl get services

	Scale up the number of pods running on your service:
	kubectl scale deployment nginx --replicas 3

	Confirm that Kubernetes has updated the number of pods:
	kubectl get pods

	Confirm that your external IP address has not changed:
	kubectl get services

	Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.